---
#######################################
### THIS FILE IS MANAGED BY ANSIBLE ###
###    PLEASE MAKE CHANGES THERE    ###
#######################################

version: "3.7"

########################### EXTENSION FIELDS

# Default TZ, uid and pid
# To use this put this block in your service: "<<: *default-tz-uid-gid"
x-environment: &default-tz-uid-gid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

# To use this put this block in your service: "<<: *logging"
x-logging: &logging
  logging:
    driver: loki
    options:
      loki-url: "http://${SERVER_IP}:${LOKI_PORT}/loki/api/v1/push"

########################### NETWORKS

networks:
  default:
    name: docker_default
    external: true
  traefik_proxy:
    name: traefik_proxy
    external: true
  socket_proxy:
    name: socket_proxy
    external: true

########################### SECRETS

secrets:
  htpasswd:
    file: ${DOCKERDIR}/secrets/htpasswd
  cloudflare_email:
    file: ${DOCKERDIR}/secrets/cloudflare_email
  cloudflare_api_key:
    file: ${DOCKERDIR}/secrets/cloudflare_api_key
  plex_claim:
    file: ${DOCKERDIR}/secrets/plex_claim
  traefik_pilot_token:
    file: ${DOCKERDIR}/secrets/traefik_pilot_token
  gmail_email:
    file: ${DOCKERDIR}/secrets/gmail_address
  # This gmail password needs to be the APPLICATION password, not your main login one.
  # https://support.google.com/accounts/answer/185833?hl=en
  gmail_app_pass:
    file: ${DOCKERDIR}/secrets/gmail_app_pass
  services_username:
    file: ${DOCKERDIR}/secrets/services_username
  services_password:
    file: ${DOCKERDIR}/secrets/services_password
  authelia_jwt_secret:
    file: ${DOCKERDIR}/secrets/authelia_jwt_secret
  authelia_session_secret:
    file: ${DOCKERDIR}/secrets/authelia_session_secret
  authelia_storage_mysql_password:
    file: ${DOCKERDIR}/secrets/authelia_storage_mysql_password

########################### SERVICES

services:

  # # Photo viewer like google photos
  # # https://hub.docker.com/r/photoprism/photoprism
  # photoprism:
  #   container_name: photoprism
  #   image: photoprism/photoprism:latest   # Use photoprism/photoprism:preview for testing preview builds
  #   ## Don't enable automatic restarts until PhotoPrism has been properly configured and tested!
  #   ## If the service gets stuck in a restart loop, this points to a memory, filesystem, network, or database issue:
  #   ## https://docs.photoprism.app/getting-started/troubleshooting/#fatal-server-errors
  #   # restart: unless-stopped
  #   networks:
  #     - traefik_proxy
  #     - default
  #   depends_on:
  #     - mariadb
  #   security_opt:
  #     - seccomp:unconfined
  #     - apparmor:unconfined
  #   ports:
  #     - "${PHOTOPRISM_PORT}:2342" # HTTP port (host:container)
  #   environment:
  #     PHOTOPRISM_ADMIN_PASSWORD: ${PHOTOPRISM_ADMIN_PASSWORD}
  #     PHOTOPRISM_SITE_URL: "https://photo.${DOMAINNAME}:${PHOTOPRISM_PORT}/"  # public server URL incl http:// or https:// and /path, :port is optional
  #     PHOTOPRISM_ORIGINALS_LIMIT: 5000               # file size limit for originals in MB (increase for high-res video)
  #     PHOTOPRISM_HTTP_COMPRESSION: "gzip"            # improves transfer speed and bandwidth utilization (none or gzip)
  #     PHOTOPRISM_DEBUG: "false"                      # run in debug mode (shows additional log messages)
  #     PHOTOPRISM_PUBLIC: "false"                     # no authentication required (disables password protection)
  #     PHOTOPRISM_READONLY: "true"                    # don't modify originals directory (reduced functionality)
  #     PHOTOPRISM_EXPERIMENTAL: "false"               # enables experimental features
  #     PHOTOPRISM_DISABLE_CHOWN: "false"              # disables storage permission updates on startup
  #     PHOTOPRISM_DISABLE_WEBDAV: "false"             # disables built-in WebDAV server
  #     PHOTOPRISM_DISABLE_SETTINGS: "false"           # disables Settings in Web UI
  #     PHOTOPRISM_DISABLE_TENSORFLOW: "false"         # disables all features depending on TensorFlow
  #     PHOTOPRISM_DISABLE_FACES: "false"              # disables facial recognition
  #     PHOTOPRISM_DISABLE_CLASSIFICATION: "false"     # disables image classification
  #     PHOTOPRISM_DARKTABLE_PRESETS: "false"          # enables Darktable presets and disables concurrent RAW conversion
  #     PHOTOPRISM_DETECT_NSFW: "false"                # flag photos as private that MAY be offensive (requires TensorFlow)
  #     PHOTOPRISM_UPLOAD_NSFW: "true"                 # allows uploads that MAY be offensive
  #     # PHOTOPRISM_DATABASE_DRIVER: "sqlite"         # SQLite is an embedded database that doesn't require a server
  #     PHOTOPRISM_DATABASE_DRIVER: "mysql"            # use MariaDB 10.5+ or MySQL 8+ instead of SQLite for improved performance
  #     PHOTOPRISM_DATABASE_SERVER: "${MARIADB_HOSTNAME}:${MARIADB_PORT}"     # MariaDB or MySQL database server (hostname:port)
  #     PHOTOPRISM_DATABASE_NAME: ${PHOTOPRISM_DATABASE_NAME}                 # MariaDB or MySQL database schema name
  #     PHOTOPRISM_DATABASE_USER: ${PHOTOPRISM_DATABASE_USERNAME}             # MariaDB or MySQL database user name
  #     PHOTOPRISM_DATABASE_PASSWORD: ${PHOTOPRISM_DATABASE_PASSWORD}         # MariaDB or MySQL database user password
  #     PHOTOPRISM_SITE_TITLE: "PhotoPrism"
  #     PHOTOPRISM_SITE_CAPTION: "Browse Your Life"
  #     PHOTOPRISM_SITE_DESCRIPTION: ""
  #     PHOTOPRISM_SITE_AUTHOR: ""
  #     ## Hardware video transcoding config (optional)
  #     # PHOTOPRISM_FFMPEG_BUFFERS: "64"              # FFmpeg capture buffers (default: 32)
  #     # PHOTOPRISM_FFMPEG_BITRATE: "32"              # FFmpeg encoding bitrate limit in Mbit/s (default: 50)
  #     # PHOTOPRISM_FFMPEG_ENCODER: "h264_v4l2m2m"    # use Video4Linux for AVC transcoding (default: libx264)
  #     # PHOTOPRISM_FFMPEG_ENCODER: "h264_qsv"        # use Intel Quick Sync Video for AVC transcoding (default: libx264)
  #     # PHOTOPRISM_INIT: "intel-graphics tensorflow-amd64-avx2" # enable TensorFlow AVX2 & Intel Graphics support
  #     ## Enable TensorFlow AVX2 support for modern Intel CPUs (requires starting the container as root)
  #     # PHOTOPRISM_INIT: "tensorflow-amd64-avx2"
  #     # PHOTOPRISM_UMASK: 0000
  #     HOME: "/photoprism"
  #   ## Start as a non-root user (see https://docs.docker.com/engine/reference/run/#user)
  #   user: "${UID}:${GID}"
  #   ## Hardware devices for video transcoding and machine learning (optional)
  #   # devices:
  #   #  - "/dev/video11:/dev/video11" # Video4Linux (h264_v4l2m2m)
  #   #  - "/dev/dri/renderD128:/dev/dri/renderD128" # Intel GPU
  #   #  - "/dev/dri/card0:/dev/dri/card0"
  #   working_dir: "/photoprism"
  #   ## Storage Folders: "~" is a shortcut for your home directory, "." for the current directory
  #   volumes:
  #     - "${USERDIR}/mount/photos:/photoprism/originals"  # original media files (photos and videos)
  #     - "${DOCKERDIR}/photoprism:/photoprism/storage"    # *writable* storage folder for cache, database, and sidecar files (never remove)
  #     # - "/example/family:/photoprism/originals/family" # *additional* media folders can be mounted like this
  #     # - "~/Import:/photoprism/import"                  # *optional* base folder from which files can be imported to originals

  # # tdarr to help convert/transcode downloaded copies to whatever format desired
  # # https://hub.docker.com/r/haveagitgat/tdarr
  # tdarr:
  #   container_name: tdarr
  #   image: haveagitgat/tdarr:latest
  #   restart: unless-stopped
  #   networks:
  #     - traefik_proxy
  #   ports:
  #    - "${TDARR_WEBUI_PORT}:8265"
  #    - "${TDARR_SERVER_PORT}:8266"
  #   #  - "${TDARR_NODE_PORT}:8267" # node port. It should be mapped on this container because  the node container use the network from the main container
  #   volumes:
  #     - ${DOCKERDIR}/tdarr/server:/app/server
  #     - ${DOCKERDIR}/tdarr/configs:/app/configs
  #     - ${DOCKERDIR}/tdarr/logs:/app/logs
  #     # - $DOWNLOADSDIR/transcode/tdarr:/data/temp
  #     # - $DATADIR/Photos/zVideos:/data/media:ro
  #     - ${USERDIR}/mount/downloads/tdarr:/data/output
  #   environment:
  #     PUID: $UID
  #     PGID: $GID
  #     TZ: $TZ
  #     serverIP: tdarr # or hostname
  #     serverPort: ${TDARR_SERVER_PORT}
  #     webUIPort: ${TDARR_WEBUI_PORT}
  #     UMASK_SET: 002
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.tdarr-rtr.entrypoints=https"
  #     - "traefik.http.routers.tdarr-rtr.rule=Host(`tdarr.$DOMAINNAME`)"
  #     ## Middlewares
  #     - "traefik.http.routers.tdarr-rtr.middlewares=chain-oauth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.tdarr-rtr.service=tdarr-svc"
  #     - "traefik.http.services.tdarr-svc.loadbalancer.server.port=8265"
